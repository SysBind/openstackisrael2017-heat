heat_template_version: 2013-05-23

parameters:
  flavor:
    type: string
    description: Flavor to use for servers
    default: 1C-1GB
  image:
    type: string
    description: Image name or ID
    default: Ubuntu 16.04 Xenial Xerus
  key_name:
    type: string
    description: Keypair to inject into newly created servers
  public_net:
    type: string
    description: Public network ID
    default: ext-net
  packages:
    type: comma_delimited_list
    description: Additional packages to install
    default: ""

resources:

  mybox:
    type: "OS::Nova::Server"
    properties:
      name: mybox
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: mybox_management_port }
      user_data: { get_resource: myconfig }
      user_data_format: RAW

  myconfig:
    type: "OS::Heat::CloudConfig"
    properties:
      cloud_config:
        package_update: true
        package_upgrade: false
        packages: { get_param: packages }

  mybox_management_port:
    type: "OS::Neutron::Port"
    properties:
      network_id: { get_resource: mynet }
      security_groups:
        - { get_resource: mysecurity_group }

  mynet:
    type: "OS::Neutron::Net"
    properties:
      name: management-net

  mysub_net:
    type: "OS::Neutron::Subnet"
    properties:
      name: management-sub-net
      network_id: { get_resource: mynet }
      cidr: 192.168.101.0/24
      gateway_ip: 192.168.101.1
      enable_dhcp: true
      allocation_pools:
        - start: "192.168.101.2"
          end: "192.168.101.50"

  mysecurity_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Neutron security group rules
      name: mysecurity_group
      rules:
      - remote_ip_prefix: 0.0.0.0/0
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - remote_ip_prefix: 0.0.0.0/0
        protocol: icmp
        direction: ingress

  router:
    type: OS::Neutron::Router

  router_gateway:
    type: OS::Neutron::RouterGateway
    properties:
      router_id: { get_resource: router }
      network_id: { get_param: public_net }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: mysub_net }

  myfloating_ip:
    type: "OS::Neutron::FloatingIP"
    properties:
      floating_network_id: { get_param: public_net }
      port_id: { get_resource: mybox_management_port }

outputs:
  public_ip:
    description: Floating IP address in public network
    value: { get_attr: [ myfloating_ip, floating_ip_address ] }
